{"version":3,"sources":["Population.js","MedianIncome.js","App.js","serviceWorker.js","index.js"],"names":["PopulationData","Population","this","drawChart","margin","width","height","formatComma","d3","svg","append","attr","x","range","domain","map","d","year","padding","call","selectAll","style","y","data","enter","population","bandwidth","text","id","React","Component","IncomeData","MedianIncome","datum","income","html","App","state","className","fontStyle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59b6024f.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nconst PopulationData = [\r\n    {\r\n        'year': 2009,\r\n        'population': 1107192\r\n    },\r\n    {\r\n        'year': 2010,\r\n        'population': 1123699\r\n    },\r\n    {\r\n        'year': 2011,\r\n        'population': 1141585\r\n    },\r\n    {\r\n        'year': 2012,\r\n        'population': 1120225\r\n    },\r\n    {\r\n        'year': 2013,\r\n        'population': 1149552\r\n    },\r\n    {\r\n        'year': 2014,\r\n        'population': 1242290\r\n    },\r\n    {\r\n        'year': 2015,\r\n        'population': 1261596\r\n    },\r\n    {\r\n        'year': 2016,\r\n        'population': 1278982\r\n    },\r\n    {\r\n        'year': 2017,\r\n        'population': 1292133\r\n    },\r\n    {\r\n        'year': 2018,\r\n        'population': 1311833\r\n    },\r\n];\r\nclass Population extends React.Component {\r\n    componentDidMount() {\r\n        this.drawChart();\r\n    }\r\n    drawChart() {\r\n        // set the dimensions and margins of the graph\r\n        var margin = { top: 30, right: 30, bottom: 70, left: 60 },\r\n            width = 800 - margin.left - margin.right,\r\n            height = 320 - margin.top - margin.bottom;\r\n        //Set variable\r\n        const padding = 20;\r\n        const formatComma = d3.format(\",\")\r\n\r\n        //Set svg\r\n        const svg = d3.select(\"#population_data\")\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            //.style(\"margin-left\", \"300\");\r\n            .append(\"g\")\r\n            .attr(\"transform\",\r\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n        // Draw axis\r\n        //XAxis\r\n        var x = d3.scaleBand()\r\n            .range([0, width])\r\n            .domain(PopulationData.map(function (d) { return d.year; }))\r\n            .padding(0.2);\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(d3.axisBottom(x))\r\n            .selectAll(\"text\")\r\n            .attr(\"transform\", \"translate(-10,0)\")\r\n            .style(\"text-anchor\", \"middle\");\r\n\r\n        //YAxis       \r\n        var y = d3.scaleLinear()\r\n            .domain([0, 1500000])\r\n            .range([height, 0]);\r\n        svg.append(\"g\")\r\n            .call(d3.axisLeft(y));\r\n\r\n        // Draw bar chart\r\n        svg.selectAll(\"mybar\")\r\n            .data(PopulationData)\r\n            .enter()\r\n            .append(\"rect\")\r\n            // .attr(\"x\", (d, i) => 30 + i * 70)\r\n            //.attr(\"y\", (d, i) => 300 - d.population / 5000)\r\n            .attr(\"x\", function (d) { return x(d.year); })\r\n            .attr(\"y\", function (d) { return y(d.population); })\r\n            // .attr(\"width\", 35)\r\n            // .attr(\"height\", (d, i) => d.population / 5000)\r\n            .attr(\"width\", x.bandwidth() / 4 * 3)\r\n            .attr(\"height\", function (d) { return height - y(d.population); })\r\n            .attr(\"fill\", \"green\")\r\n            //tooltip\r\n            .append('title')\r\n            .text(function (d) { return 'Population : ' + formatComma(d.population); })\r\n        //Add title\r\n        svg.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 15)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"20px\")\r\n            //.attr(\"font-weight\",'bold')          \r\n            .text(\"Historical Total Population\");\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"population_data\"></div>\r\n        )\r\n    }\r\n};\r\nexport default Population;","import React from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nconst IncomeData = [\r\n    {\r\n        'year': 2000,\r\n        'income': 60400\r\n    },\r\n    {\r\n        'year': 2001,\r\n        'income': 64700\r\n    },\r\n    {\r\n        'year': 2002,\r\n        'income': 66200\r\n    },\r\n    {\r\n        'year': 2003,\r\n        'income': 67200\r\n    },\r\n    {\r\n        'year': 2004,\r\n        'income': 70500\r\n    },\r\n    {\r\n        'year': 2005,\r\n        'income': 74700\r\n    },\r\n    {\r\n        'year': 2006,\r\n        'income': 82600\r\n    },\r\n    {\r\n        'year': 2007,\r\n        'income': 87120\r\n    },\r\n    {\r\n        'year': 2008,\r\n        'income': 90630\r\n    },\r\n    {\r\n        'year': 2009,\r\n        'income': 87470\r\n    },\r\n    {\r\n        'year': 2010,\r\n        'income': 88400\r\n    },\r\n    {\r\n        'year': 2011,\r\n        'income': 92160\r\n    },\r\n    {\r\n        'year': 2012,\r\n        'income': 96990\r\n    },\r\n    {\r\n        'year': 2013,\r\n        'income': 99850\r\n    },\r\n    {\r\n        'year': 2014,\r\n        'income': 102890\r\n    },\r\n    {\r\n        'year': 2015,\r\n        'income': 102700\r\n    },\r\n    {\r\n        'year': 2016,\r\n        'income': 98620\r\n    },\r\n    {\r\n        'year': 2017,\r\n        'income': 100320\r\n    },\r\n];\r\nclass MedianIncome extends React.Component {\r\n    componentDidMount() {\r\n        this.drawChart();\r\n    }\r\n    drawChart() {\r\n        \r\n        // set the dimensions and margins of the graph\r\n        var margin = { top: 30, right: 30, bottom: 70, left: 60 },\r\n            width = 800 - margin.left - margin.right,\r\n            height = 320 - margin.top - margin.bottom;\r\n        //Set variable        \r\n        const formatComma = d3.format(\",\")\r\n\r\n        //Set svg\r\n        const svg = d3.select(\"#income_data\")\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            //.style(\"margin-left\", \"300\");\r\n            .append(\"g\")\r\n            .attr(\"transform\",\r\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n        // Draw axis\r\n\r\n        //XAxis\r\n        var x = d3.scaleLinear()\r\n            .domain([2000,2017])  \r\n            .range([0, width]);\r\n        svg.append(\"g\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(d3.axisBottom(x));\r\n\r\n\r\n        //YAxis       \r\n        var y = d3.scaleLinear()\r\n            .domain([0, 110000])\r\n            .range([height, 0]);\r\n        svg.append(\"g\")\r\n            .call(d3.axisLeft(y));\r\n\r\n        // Draw the line\r\n        svg.append(\"path\")\r\n            .datum(IncomeData)\r\n            .attr(\"fill\", \"none\")\r\n            .attr(\"stroke\", \"green\")\r\n            .attr(\"stroke-width\", 1.5)\r\n            .attr(\"d\", d3.line()\r\n                .x(function (d) { return x(d.year) })\r\n                .y(function (d) { return y(d.income) })\r\n            )\r\n        // create a tooltip\r\n        //var Tooltip = d3.select(\"#my_dataviz\")\r\n        //    .append(\"div\")\r\n        //    .data(IncomeData)\r\n        //.style(\"position\", \"absolute\")\r\n        //.style(\"visibility\", \"visible\")\r\n        //.html(function (d) { return 'Income : $' + formatComma(d.income) + \"<br/>\" + 'Year: '; })\r\n        //var mouseover = function (d) {\r\n        //    Tooltip\r\n        //        .style(\"opacity\", 1)\r\n        //        .text(function (d) { return 'Income : $' + formatComma(d.income) + \"<br/>\" + 'Year: '; })\r\n            \r\n       // }\r\n\r\n        // Draw the points\r\n        svg.append(\"g\")\r\n            .selectAll(\"dot\")\r\n            .data(IncomeData)\r\n            .attr(\"id\", \"dotIncome\")\r\n            .enter()\r\n            .append(\"circle\")\r\n            .attr(\"cx\", function (d) { return x(d.year) })\r\n            .attr(\"cy\", function (d) { return y(d.income) })\r\n            .attr(\"r\", 5)\r\n            .attr(\"fill\", \"green\")\r\n            //tooltip\r\n            .append('title')\r\n            .attr(\"data-html\", \"true\")\r\n            .html(function (d) { return 'Median Income ('+d.year + '): $' + formatComma(d.income) ;})\r\n            //.on(\"mouseover\", mouseover)\r\n\r\n        //Add title\r\n        svg.append(\"text\")\r\n            .attr(\"x\", 200)\r\n            .attr(\"y\", 15)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .style(\"font-size\", \"20px\")\r\n            //.attr(\"font-weight\",'bold')          \r\n            .text(\"Historical Median Household Income\");\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"income_data\"></div>\r\n        )\r\n    }\r\n};\r\nexport default MedianIncome;","import React from 'react'\nimport './App.css';\nimport Population from './Population';\nimport MedianIncome from './MedianIncome';\n\nclass App extends React.Component {\n  \n  state = {\n    width: 700,\n    height: 500,\n    id: 'root'\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <div> \n          <h1> Statistics Calgary </h1>\n        </div>\n        <div className=\"Text\">\n          <p> Mouse over the graph for more detail</p>\n          <p style={{fontStyle: 'italic'}}> Data source: Alberta Open Government</p>\n          <p> <br /></p>\n        </div>\n        <div>\n          <Population  />\n        </div>   \n        <div>\n          <MedianIncome />\n        </div>  \n        \n      </div>\n    );\n  }\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}